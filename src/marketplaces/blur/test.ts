import util from 'util';
import { Interface } from 'ethers';
import { blurExchangeABI } from './blur-abi';
import { mapOrdersMatched } from './map-orders-matched';

const data1 =
  '0x0000000000000000000000000000000000000000000000000000000000000080a8cbaf2ab4946491dc6acd6cc6a9fe80ee6badd01192c83cb9b347db405d4ec300000000000000000000000000000000000000000000000000000000000002c0f8d05c3fcdf0025321026d475c5a466bb7da9038a86ab143f2362ec12deb5f8e000000000000000000000000aaa42e5faa464bba9aa79d8499bc6abee139f81800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000dab4a563819e8fd93dba3b25bc3495000000000000000000000000e5af63234f93afd72a8b9114803e33f6d97669560000000000000000000000000000000000000000000000000000000000000ca40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000376c1e0a7f0000000000000000000000000000000000000000000000000000000000006491356c00000000000000000000000000000000000000000000000000000000657e836b00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000006f235ebb3bc4fad8a38f80501a3eafa20000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000320000000000000000000000009532fc6cd07fa32c1bed256d5f7dad53a35ac19500000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae4705dc0816ee6d8a13f1c72780ec5021915fed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dab4a563819e8fd93dba3b25bc3495000000000000000000000000e5af63234f93afd72a8b9114803e33f6d97669560000000000000000000000000000000000000000000000000000000000000ca40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000376c1e0a7f0000000000000000000000000000000000000000000000000000000000006491356d0000000000000000000000000000000000000000000000000000000064ffdad100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000004c4a838f4e5b39ad2ed55cf6835e9dc500000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000';
const topics1 = [
  '0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64',
  '0x000000000000000000000000aaa42e5faa464bba9aa79d8499bc6abee139f818',
  '0x000000000000000000000000ae4705dc0816ee6d8a13f1c72780ec5021915fed',
];

/**
 * Can the kafka service hold a cache of the of the 85th - 90th day of sales (or something lower)?
 * Along with having a cache of the collectionMetadata, clusters for a collection, and tokenIds within a cluster,
 * We can subtract sales from aggregates when we add new sales depending on when the 85th - 90th days sales have expired
 */

export const blurExchangeInterface = new Interface(blurExchangeABI);
// console.log(seaportInterface.getEvent('blu'));
const parsedLog = blurExchangeInterface.parseLog({
  data: data1,
  topics: topics1,
});
// console.log(
//   util.inspect(
//     seaportInterface.parseTransaction({ data: inputData, value }),
//     false,
//     null,
//     true
//   )
// );
if (parsedLog) {
  console.log(util.inspect(mapOrdersMatched(parsedLog), false, null, true));
}
